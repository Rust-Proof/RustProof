use std::str::FromStr;
use expression::{Expression, BinaryExpressionData, UnaryExpressionData, VariableMappingData, UnsignedBitVectorData, SignedBitVectorData, BinaryOperator, UnaryOperator};
grammar;

pub E1: Expression = {
	<left: E1> <op: BOP1> <right: E2> => Expression::BinaryExpression( BinaryExpressionData { op: op, left: Box::new(left), right: Box::new(right) } ),
	E2,
};

pub E2: Expression = {
	<left: E2> <op: BOP2> <right: E3> => Expression::BinaryExpression( BinaryExpressionData { op: op, left: Box::new(left), right: Box::new(right) } ),
	E3,
};

pub E3: Expression = {
	<left: E3> <op: BOP3> <right: E4> => Expression::BinaryExpression( BinaryExpressionData { op: op, left: Box::new(left), right: Box::new(right) } ),
	E4,
};

pub E4: Expression = {
	<left: E4> <op: BOP4> <right: E5> => Expression::BinaryExpression( BinaryExpressionData { op: op, left: Box::new(left), right: Box::new(right) } ),
	E5,
};

pub E5: Expression = {
	<left: E5> <op: BOP5> <right: E6> => Expression::BinaryExpression( BinaryExpressionData { op: op, left: Box::new(left), right: Box::new(right) } ),
	E6,
};

pub E6: Expression = {
	<op: UOP> <e: E6> => Expression::UnaryExpression( UnaryExpressionData { op: op, e: Box::new(e) } ),
	E7,
};

pub E7: Expression = {
	"true" => Expression::BooleanLiteral(true),
	"false" => Expression::BooleanLiteral(false),
	<i:r"[-][0-9]+"> => Expression::SignedBitVector( SignedBitVectorData { size: 64, value: i64::from_str(i).unwrap() } ),
	<i:r"[0-9]+"> => Expression::UnsignedBitVector( UnsignedBitVectorData { size: 64, value: u64::from_str(i).unwrap() } ),
	<n: IDENTIFIER> ":" <t: TYPE> => Expression::VariableMapping( VariableMappingData { name: n, var_type: t } ),
	"(" <e: E1> ")" => e,
};

pub UOP: UnaryOperator = {
	"-" => UnaryOperator::Negation,
	"!" => UnaryOperator::BitwiseNot,
	"NOT" => UnaryOperator::Not,
};

pub BOP1: BinaryOperator = {
	"AND" => BinaryOperator::And,
	"OR" => BinaryOperator::Or,
	"XOR" => BinaryOperator::Xor,
	"IMPLIES" => BinaryOperator::Implication,
	"EQUIV" => BinaryOperator::BiImplication,
};

pub BOP2: BinaryOperator = {
	"&&" => BinaryOperator::And,
	"||" => BinaryOperator::Or,
};

pub BOP3: BinaryOperator = {
	"&" => BinaryOperator::BitwiseAnd,
	"|" => BinaryOperator::BitwiseOr,
	"^" => BinaryOperator::BitwiseXor,
	"<<" => BinaryOperator::BitwiseLeftShift,
	">>" => BinaryOperator::BitwiseRightShift,
};

pub BOP4: BinaryOperator = {
	"+" => BinaryOperator::Addition,
	"-" => BinaryOperator::Subtraction,
};

pub BOP5: BinaryOperator = {
	"<" => BinaryOperator::LessThan,
	"<=" => BinaryOperator::LessThanOrEqual,
	">" => BinaryOperator::GreaterThan,
	">=" => BinaryOperator::GreaterThanOrEqual,
	"==" => BinaryOperator::Equal,
	"!=" => BinaryOperator::NotEqual,
};

pub IDENTIFIER: String = {
	<i:r"_[a-zA-Z0-9_]+"> => i.to_string(),
	<i:r"[a-zA-Z][a-zA-Z0-9_]*"> => i.to_string(),
};

pub TYPE: String = {
	"bool" => "bool".to_string(),
	"i8" => "i8".to_string(),
	"i16" => "i16".to_string(),
	"i32" => "i32".to_string(),
	"i64" => "i64".to_string(),
	"u8" => "u8".to_string(),
	"u16" => "u16".to_string(),
	"u32" => "u32".to_string(),
	"u64" => "u64".to_string(),
};