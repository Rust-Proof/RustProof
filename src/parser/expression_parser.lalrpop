use std::str::FromStr;
use expression::{Expression, BinaryExpressionData, UnaryExpressionData, VariableMappingData, UnsignedBitVectorData, SignedBitVectorData, BinaryOperator, UnaryOperator};
grammar;

pub E1: Expression = {
    <left: E1> <op: BOP1> <right: E2> => Expression::BinaryExpression( BinaryExpressionData { op: op, left: Box::new(left), right: Box::new(right) } ),
    E2,
};

E2: Expression = {
    <left: E2> <op: BOP2> <right: E3> => Expression::BinaryExpression( BinaryExpressionData { op: op, left: Box::new(left), right: Box::new(right) } ),
    E3,
};

E3: Expression = {
    <left: E3> <op: BOP3> <right: E4> => Expression::BinaryExpression( BinaryExpressionData { op: op, left: Box::new(left), right: Box::new(right) } ),
    E4,
};
    
E4: Expression = {
    <left: E4> <op: BOP4> <right: E5> => Expression::BinaryExpression( BinaryExpressionData { op: op, left: Box::new(left), right: Box::new(right) } ),
    E5,
};

E5: Expression = {
    <left: E5> <op: BOP5> <right: E6> => Expression::BinaryExpression( BinaryExpressionData { op: op, left: Box::new(left), right: Box::new(right) } ),
    E6,
};

E6: Expression = {
    <left: E6> <op: BOP6> <right: E7> => Expression::BinaryExpression( BinaryExpressionData { op: op, left: Box::new(left), right: Box::new(right) } ),
    E7,
};

E7: Expression = {
    <left: E7> <op: BOP7> <right: E8> => Expression::BinaryExpression( BinaryExpressionData { op: op, left: Box::new(left), right: Box::new(right) } ),
    E8,
};

E8: Expression = {
    <left: E8> <op: BOP8> <right: E9> => Expression::BinaryExpression( BinaryExpressionData { op: op, left: Box::new(left), right: Box::new(right) } ),
    E9,
};

E9: Expression = {
    <op: UOP> <e: E9> => Expression::UnaryExpression( UnaryExpressionData { op: op, e: Box::new(e) } ),
    E10,
};

E10: Expression = {
    "true" => Expression::BooleanLiteral(true),
    "false" => Expression::BooleanLiteral(false),
    <i:r"[-][0-9]+"> ":" "i8" => Expression::SignedBitVector( SignedBitVectorData {
        size: 8, value: i8::from_str(i).unwrap() as i64
    } ),
    <i:r"[-][0-9]+"> ":" "i16" => Expression::SignedBitVector( SignedBitVectorData {
        size: 16, value: i16::from_str(i).unwrap() as i64
    } ),
    <i:r"[-][0-9]+"> ":" "i32" => Expression::SignedBitVector( SignedBitVectorData {
        size: 32, value: i32::from_str(i).unwrap() as i64
    } ),
    <i:r"[-][0-9]+"> ":" "i64" => Expression::SignedBitVector( SignedBitVectorData {
        size: 64, value: i64::from_str(i).unwrap() as i64
    } ),
    <i:r"[0-9]+"> ":" "i8" => Expression::SignedBitVector( SignedBitVectorData {
        size: 8, value: i8::from_str(i).unwrap() as i64
    } ),
    <i:r"[0-9]+"> ":" "i16" => Expression::SignedBitVector( SignedBitVectorData {
        size: 16, value: i16::from_str(i).unwrap() as i64
    } ),
    <i:r"[0-9]+"> ":" "i32" => Expression::SignedBitVector( SignedBitVectorData {
        size: 32, value: i32::from_str(i).unwrap() as i64
    } ),
    <i:r"[0-9]+"> ":" "i64" => Expression::SignedBitVector( SignedBitVectorData {
        size: 64, value: i64::from_str(i).unwrap() as i64
    } ),
    <i:r"[0-9]+"> ":" "u8" => Expression::UnsignedBitVector( UnsignedBitVectorData {
        size: 8, value: u8::from_str(i).unwrap() as u64
    } ),
    <i:r"[0-9]+"> ":" "u16" => Expression::UnsignedBitVector( UnsignedBitVectorData {
        size: 16, value: u16::from_str(i).unwrap() as u64
    } ),
    <i:r"[0-9]+"> ":" "u32" => Expression::UnsignedBitVector( UnsignedBitVectorData {
        size: 32, value: u32::from_str(i).unwrap() as u64
    } ),
    <i:r"[0-9]+"> ":" "u64" => Expression::UnsignedBitVector( UnsignedBitVectorData {
        size: 64, value: u64::from_str(i).unwrap() as u64
    } ),
    <n: IDENTIFIER> ":" <t: TYPE> => Expression::VariableMapping( VariableMappingData {
        name: n, var_type: t
    } ),
    <ib: INT_BOUNDS> => ib,
    "(" <e: E1> ")" => e,
};

UOP: UnaryOperator = {
    "-" => UnaryOperator::Negation,
    "!" => UnaryOperator::BitwiseNot,
    "NOT" => UnaryOperator::Not,
};

BOP1: BinaryOperator = {
    "&&" => BinaryOperator::And,
    "||" => BinaryOperator::Or,
    "AND" => BinaryOperator::And,
    "OR" => BinaryOperator::Or,
    "XOR" => BinaryOperator::Xor,
    "IMPLIES" => BinaryOperator::Implication,
    "EQUIV" => BinaryOperator::BiImplication,
};

BOP2: BinaryOperator = {
    "<" => BinaryOperator::LessThan,
    "<=" => BinaryOperator::LessThanOrEqual,
    ">" => BinaryOperator::GreaterThan,
    ">=" => BinaryOperator::GreaterThanOrEqual,
    "==" => BinaryOperator::Equal,
    "!=" => BinaryOperator::NotEqual,
};

BOP3: BinaryOperator = {
    "|" => BinaryOperator::BitwiseOr,
};

BOP4: BinaryOperator = {
    "^" => BinaryOperator::BitwiseXor,
};

BOP5: BinaryOperator = {
    "&" => BinaryOperator::BitwiseAnd,
};

BOP6: BinaryOperator = {
    "<<" => BinaryOperator::BitwiseLeftShift,
    ">>" => BinaryOperator::BitwiseRightShift,
};

BOP7: BinaryOperator = {
    "+" => BinaryOperator::Addition,
    "-" => BinaryOperator::Subtraction,
};

BOP8: BinaryOperator = {
    "*" => BinaryOperator::Multiplication,
    "/" => BinaryOperator::Division,
    "%" => BinaryOperator::Modulo,
};

IDENTIFIER: String = {
    <i:r"_[a-zA-Z0-9_]+"> => i.to_string(),
    <i:r"[a-zA-Z][a-zA-Z0-9_]*"> => i.to_string(),
};

TYPE: String = {
    "bool" => "bool".to_string(),
    "i8" => "i8".to_string(),
    "i16" => "i16".to_string(),
    "i32" => "i32".to_string(),
    "i64" => "i64".to_string(),
    "u8" => "u8".to_string(),
    "u16" => "u16".to_string(),
    "u32" => "u32".to_string(),
    "u64" => "u64".to_string(),
};

INT_BOUNDS: Expression = {
    "i8::MAX" => Expression::SignedBitVector( SignedBitVectorData { size: 8, value: i8::max_value() as i64 } ),
    "i16::MAX" => Expression::SignedBitVector( SignedBitVectorData { size: 16, value: i16::max_value() as i64 } ),
    "i32::MAX" => Expression::SignedBitVector( SignedBitVectorData { size: 32, value: i32::max_value() as i64 } ),
    "i64::MAX" => Expression::SignedBitVector( SignedBitVectorData { size: 64, value: i64::max_value() as i64 } ),
    "i8::MIN" => Expression::SignedBitVector( SignedBitVectorData { size: 8, value: i8::min_value() as i64 } ),
    "i16::MIN" => Expression::SignedBitVector( SignedBitVectorData { size: 16, value: i16::min_value() as i64 } ),
    "i32::MIN" => Expression::SignedBitVector( SignedBitVectorData { size: 32, value: i32::min_value() as i64 } ),
    "i64::MIN" => Expression::SignedBitVector( SignedBitVectorData { size: 64, value: i64::min_value() as i64 } ),
    "u8::MAX" => Expression::UnsignedBitVector( UnsignedBitVectorData { size: 8, value: u8::max_value() as u64 } ),
    "u16::MAX" => Expression::UnsignedBitVector( UnsignedBitVectorData { size: 16, value: u16::max_value() as u64 } ),
    "u32::MAX" => Expression::UnsignedBitVector( UnsignedBitVectorData { size: 32, value: u32::max_value() as u64 } ),
    "u64::MAX" => Expression::UnsignedBitVector( UnsignedBitVectorData { size: 64, value: u64::max_value() as u64 } ),
    "u8::MIN" => Expression::UnsignedBitVector( UnsignedBitVectorData { size: 8, value: u8::min_value() as u64 } ),
    "u16::MIN" => Expression::UnsignedBitVector( UnsignedBitVectorData { size: 16, value: u16::min_value() as u64 } ),
    "u32::MIN" => Expression::UnsignedBitVector( UnsignedBitVectorData { size: 32, value: u32::min_value() as u64 } ),
    "u64::MIN" => Expression::UnsignedBitVector( UnsignedBitVectorData { size: 64, value: u64::min_value() as u64 } ),
};
