	fn name: "add_three"
bb0
BasicBlockData {
    statements: [
        var0 = arg0,
        tmp0 = var0,
        tmp1 = CheckedAdd(tmp0, const 3i32)
    ],
    terminator: Some(
        Terminator {
            source_info: SourceInfo {
                span: examples/ssahli.rs:20:9: 20:14,
                scope: scope1
            },
            kind: assert(!(tmp1.1: bool), "attempted to add with overflow") -> bb1
        }
    ),
    is_cleanup: false
}
bb1
BasicBlockData {
    statements: [
        var0 = (tmp1.0: i32),
        tmp2 = var0,
        return = tmp2
    ],
    terminator: Some(
        Terminator {
            source_info: SourceInfo {
                span: examples/ssahli.rs:21:5: 21:13,
                scope: scope1
            },
            kind: goto -> bb3
        }
    ),
    is_cleanup: false
}
bb2
BasicBlockData {
    statements: [],
    terminator: Some(
        Terminator {
            source_info: SourceInfo {
                span: examples/ssahli.rs:19:1: 22:2,
                scope: scope1
            },
            kind: return
        }
    ),
    is_cleanup: false
}
bb3
BasicBlockData {
    statements: [],
    terminator: Some(
        Terminator {
            source_info: SourceInfo {
                span: examples/ssahli.rs:21:5: 21:13,
                scope: scope1
            },
            kind: goto -> bb4
        }
    ),
    is_cleanup: false
}
bb4
BasicBlockData {
    statements: [],
    terminator: Some(
        Terminator {
            source_info: SourceInfo {
                span: examples/ssahli.rs:21:5: 21:13,
                scope: scope1
            },
            kind: goto -> bb5
        }
    ),
    is_cleanup: false
}
bb5
BasicBlockData {
    statements: [],
    terminator: Some(
        Terminator {
            source_info: SourceInfo {
                span: examples/ssahli.rs:21:5: 21:13,
                scope: scope0
            },
            kind: goto -> bb6
        }
    ),
    is_cleanup: false
}
bb6
BasicBlockData {
    statements: [],
    terminator: Some(
        Terminator {
            source_info: SourceInfo {
                span: examples/ssahli.rs:21:5: 21:13,
                scope: scope0
            },
            kind: goto -> bb2
        }
    ),
    is_cleanup: false
}
bb7
BasicBlockData {
    statements: [],
    terminator: Some(
        Terminator {
            source_info: SourceInfo {
                span: examples/ssahli.rs:19:1: 22:2,
                scope: scope1
            },
            kind: goto -> bb2
        }
    ),
    is_cleanup: false
}
	fn name: "main"
bb0
BasicBlockData {
    statements: [
        var0 = const 3i32,
        tmp1 = var0
    ],
    terminator: Some(
        Terminator {
            source_info: SourceInfo {
                span: examples/ssahli.rs:7:9: 7:20,
                scope: scope1
            },
            kind: tmp0 = add_five(tmp1) -> bb1
        }
    ),
    is_cleanup: false
}
bb1
BasicBlockData {
    statements: [
        var0 = tmp0,
        tmp3 = var0
    ],
    terminator: Some(
        Terminator {
            source_info: SourceInfo {
                span: examples/ssahli.rs:8:9: 8:21,
                scope: scope1
            },
            kind: tmp2 = add_three(tmp3) -> bb2
        }
    ),
    is_cleanup: false
}
bb2
BasicBlockData {
    statements: [
        var0 = tmp2,
        tmp6 = &(*main::__STATIC_FMTSTR),
        tmp12 = &var0,
        tmp11 = (tmp12,),
        var1 = (tmp11.0: &i32)
    ],
    terminator: Some(
        Terminator {
            source_info: SourceInfo {
                span: <std macros>:3:11: 3:36,
                scope: scope1
            },
            kind: goto -> bb3
        }
    ),
    is_cleanup: false
}
bb3
BasicBlockData {
    statements: [
        tmp14 = &(*var1),
        tmp15 = <i32 as std::fmt::Debug>::fmt as fn(&i32, &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> (ReifyFnPointer)
    ],
    terminator: Some(
        Terminator {
            source_info: SourceInfo {
                span: <std macros>:2:27: 2:58,
                scope: scope2
            },
            kind: tmp13 = std::fmt::ArgumentV1<'_>::new::<i32>(tmp14, tmp15) -> bb5
        }
    ),
    is_cleanup: false
}
bb4
BasicBlockData {
    statements: [
        tmp9 = &tmp10,
        tmp8 = &(*tmp9),
        tmp7 = tmp8 as &[std::fmt::ArgumentV1<'_>] (Unsize)
    ],
    terminator: Some(
        Terminator {
            source_info: SourceInfo {
                span: <std macros>:2:27: 2:58,
                scope: scope1
            },
            kind: tmp5 = std::fmt::Arguments<'_>::new_v1(tmp6, tmp7) -> bb6
        }
    ),
    is_cleanup: false
}
bb5
BasicBlockData {
    statements: [
        tmp10 = [tmp13]
    ],
    terminator: Some(
        Terminator {
            source_info: SourceInfo {
                span: <std macros>:3:11: 3:36,
                scope: scope1
            },
            kind: goto -> bb4
        }
    ),
    is_cleanup: false
}
bb6
BasicBlockData {
    statements: [],
    terminator: Some(
        Terminator {
            source_info: SourceInfo {
                span: <std macros>:2:1: 2:60,
                scope: scope1
            },
            kind: tmp4 = std::io::_print(tmp5) -> bb7
        }
    ),
    is_cleanup: false
}
bb7
BasicBlockData {
    statements: [
        return = ()
    ],
    terminator: Some(
        Terminator {
            source_info: SourceInfo {
                span: examples/ssahli.rs:5:1: 10:2,
                scope: scope0
            },
            kind: goto -> bb8
        }
    ),
    is_cleanup: false
}
bb8
BasicBlockData {
    statements: [],
    terminator: Some(
        Terminator {
            source_info: SourceInfo {
                span: examples/ssahli.rs:5:1: 10:2,
                scope: scope0
            },
            kind: return
        }
    ),
    is_cleanup: false
}
	fn name: "add_five"
bb0
BasicBlockData {
    statements: [
        var0 = arg0,
        tmp0 = var0,
        tmp1 = CheckedAdd(tmp0, const 5i32)
    ],
    terminator: Some(
        Terminator {
            source_info: SourceInfo {
                span: examples/ssahli.rs:15:9: 15:14,
                scope: scope1
            },
            kind: assert(!(tmp1.1: bool), "attempted to add with overflow") -> bb1
        }
    ),
    is_cleanup: false
}
bb1
BasicBlockData {
    statements: [
        var0 = (tmp1.0: i32),
        tmp2 = var0,
        return = tmp2
    ],
    terminator: Some(
        Terminator {
            source_info: SourceInfo {
                span: examples/ssahli.rs:16:5: 16:13,
                scope: scope1
            },
            kind: goto -> bb3
        }
    ),
    is_cleanup: false
}
bb2
BasicBlockData {
    statements: [],
    terminator: Some(
        Terminator {
            source_info: SourceInfo {
                span: examples/ssahli.rs:14:1: 17:2,
                scope: scope1
            },
            kind: return
        }
    ),
    is_cleanup: false
}
bb3
BasicBlockData {
    statements: [],
    terminator: Some(
        Terminator {
            source_info: SourceInfo {
                span: examples/ssahli.rs:16:5: 16:13,
                scope: scope1
            },
            kind: goto -> bb4
        }
    ),
    is_cleanup: false
}
bb4
BasicBlockData {
    statements: [],
    terminator: Some(
        Terminator {
            source_info: SourceInfo {
                span: examples/ssahli.rs:16:5: 16:13,
                scope: scope1
            },
            kind: goto -> bb5
        }
    ),
    is_cleanup: false
}
bb5
BasicBlockData {
    statements: [],
    terminator: Some(
        Terminator {
            source_info: SourceInfo {
                span: examples/ssahli.rs:16:5: 16:13,
                scope: scope0
            },
            kind: goto -> bb6
        }
    ),
    is_cleanup: false
}
bb6
BasicBlockData {
    statements: [],
    terminator: Some(
        Terminator {
            source_info: SourceInfo {
                span: examples/ssahli.rs:16:5: 16:13,
                scope: scope0
            },
            kind: goto -> bb2
        }
    ),
    is_cleanup: false
}
bb7
BasicBlockData {
    statements: [],
    terminator: Some(
        Terminator {
            source_info: SourceInfo {
                span: examples/ssahli.rs:14:1: 17:2,
                scope: scope1
            },
            kind: goto -> bb2
        }
    ),
    is_cleanup: false
}
	fn name: "main::__STATIC_FMTSTR"
bb0
BasicBlockData {
    statements: [
        tmp2 = [const "", const "\n"],
        tmp1 = &tmp2,
        tmp0 = &(*tmp1),
        return = tmp0 as &'static [&'static str] (Unsize)
    ],
    terminator: Some(
        Terminator {
            source_info: SourceInfo {
                span: <std macros>:3:11: 3:36,
                scope: scope0
            },
            kind: goto -> bb1
        }
    ),
    is_cleanup: false
}
bb1
BasicBlockData {
    statements: [],
    terminator: Some(
        Terminator {
            source_info: SourceInfo {
                span: <std macros>:3:11: 3:36,
                scope: scope0
            },
            kind: return
        }
    ),
    is_cleanup: false
}
